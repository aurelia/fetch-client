/* eslint-disable */

/**
* Interceptors can process requests before they are sent, and responses
* before they are returned to callers.
*/
interface Interceptor {
  /**
  * Called with the request before it is sent. Request interceptors can modify and
  * return the request, or return a new one to be sent. If desired, the interceptor
  * may return a Response in order to short-circuit the HTTP request itself.
  *
  * @param request - The request to be sent.
  */
  request?: (request: Request) => Request|Response|Promise<Request|Response>;

  /**
  * Handles errors generated by previous request interceptors. This function acts
  * as a Promise rejection handler. It may rethrow the error to propagate the
  * failure, or return a new Request or Response to recover.
  *
  * @param error - The rejection value from the previous interceptor.
  */
  requestError?: (error: any) => Request|Response|Promise<Request|Response>;

  /**
  * Called with the response after it is received. Response interceptors can modify
  * and return the Response, or create a new one to be returned to the caller.
  *
  * @param response - The response.
  */
  response?: (response: Response, request?: Request) => Response|Promise<Response>;

  /**
   * Handles fetch errors and errors generated by previous interceptors. This
   * function acts as a Promise rejection handler. It may rethrow the error
   * to propagate the failure, or return a new Response to recover.
   *
   * @param error - The rejection value from the fetch request or from a
   * previous interceptor.
   */
  responseError?: (error: any, request?: Request) => Response|Promise<Response>;
}

/**
* The init object used to initialize a fetch Request.
* See https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
*/
interface RequestInit {
  method?: string;

  headers?: Headers|Object;

  body?: Blob|BufferSource|FormData|URLSearchParams|string;

  mode?: string;

  credentials?: string;

  cache?: string;
}
